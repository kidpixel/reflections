How is the staging area different from the working directory and the repository? What value do you think it offers?

The working directory has all files where the repository is housed, but the staging area defines WHICH files will be put into the repository.  The repository is the versioning archive for all files which have been added to the staging area.

How can you use the staging area to make sure you have one commit per logical change?

The staging area can be used to check changes vs the repository and your live code in the working directory... once you've decided you have a logical change, you manually add it to the staging area.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Adding experimental features or different versions of the game, like a port perhaps?

How do the diagrams help you visualize the branch structure?

The diagrams help us put what is a command-line interface and set of instructions/results into a graphical representation without taking that leap into a GUI.  It's still pretty confusing without a GUI, but these base commands are very powerful, so I understand why students and instructors alike encourage the use and elearning of command-line only, at least first.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

PROs: 
- much less tedious
- changes that don't conflict with each other are merged with little effort

CONs:
- not 'smart' enough to know which version is correct
- still has a manual component which may be tedious